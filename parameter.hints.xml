<application>
  <component name="ParameterNameHintsSettings">
    <blacklists>
      <blacklist language="Java">
        <added pattern="net.wizartmc.core.Extensions.runnable(consumer,first)" />
        <added pattern="net.wizartmc.engine.utilites.PredicateUtilities.lessThan(amount)" />
        <added pattern="net.wizartmc.engine.utilites.PredicateUtilities.greaterThan(amount)" />
        <added pattern="me.exerosis.reflection.ReflectClass.getField(name)" />
        <added pattern="me.exerosis.reflection.ReflectClass.getMethod(name)" />
        <added pattern="me.exerosis.reflection.ReflectClass.field(name)" />
        <added pattern="me.exerosis.reflection.ReflectClass.value(name)" />
        <added pattern="me.exerosis.reflection.Reflect.Class(className)" />
        <added pattern="me.exerosis.reflection.gamma.ReflectField.getField()" />
        <added pattern="com.comphenix.protocol.reflect.StructureModifier.write(fieldIndex,value)" />
        <added pattern="me.exerosis.packet.utils.ticker.Ticker.unregisterListener(tickListener)" />
        <added pattern="me.exerosis.packet.utils.ticker.Ticker.registerListener(tickListener)" />
        <added pattern="me.exerosis.nameplates.ExTask.stopTask(runnable)" />
        <added pattern="me.exerosis.nameplates.ExTask.startTask(runnable,delay,time)" />
        <added pattern="org.bukkit.ChatColor.translateAlternateColorCodes(altColorChar,textToTranslate)" />
        <added pattern="org.bukkit.configuration.MemorySection.getString(path,def)" />
        <added pattern="me.engineone.engine.components.scheduler.Scheduler.TaskBuilder.forNext(number)" />
        <added pattern="java.io.File.getPath()" />
        <added pattern="java.io.File.File(pathname)" />
        <added pattern="java.lang.String.replace(target,replacement)" />
        <added pattern="me.engineone.core.utilites.SwitchUtils.Ca.se(value,ca)" />
        <added pattern="me.engineone.core.utilites.SwitchUtils.when(input,closure)" />
        <added pattern="me.engineone.core.utilites.SwitchUtils.Ca.se(value,se)" />
        <added pattern="java.util.concurrent.Future.cancel(mayInterruptIfRunning)" />
        <added pattern="com.jaredscarito.stratosdrop.Scoreboard.add(score,line)" />
        <added pattern="com.jaredscarito.stratosdrop.Scoreboard.add(line,score)" />
        <added pattern="org.javatuples.Pair.with(value0,value1)" />
        <added pattern="org.bukkit.potion.PotionEffect.PotionEffect(type,duration,amplifier)" />
        <added pattern="com.penzzly.engine.core.utilites.bukkit.Functions.isCancelled(whenTrue)" />
        <added pattern="com.penzzly.engine.core.utilites.bukkit.Functions.isCancelled(whenFalse)" />
        <added pattern="Main.byClass(name)" />
        <added pattern="API.API(username,password)" />
        <added pattern="API.byClass(name,index)" />
        <added pattern="API.byClass(name)" />
        <added pattern="API.byClass(name,await)" />
        <added pattern="API.navigate(path)" />
        <added pattern="java.util.concurrent.TimeUnit.toHours(duration)" />
        <added pattern="java.util.concurrent.TimeUnit.toMinutes(duration)" />
        <added pattern="java.util.concurrent.TimeUnit.toSeconds(duration)" />
        <added pattern="com.penzzly.engine.architecture.utilites.Extensions.runnable(consumer,first)" />
        <added pattern="io.reactivex.Observable.intervalRange(start,count,initialDelay,period,unit)" />
        <added pattern="org.bukkit.Bukkit.createInventory(owner,size)" />
        <added pattern="org.bukkit.potion.PotionEffect.PotionEffect(type,duration,amplifier,ambient)" />
        <added pattern="arg(index,options)" />
        <added pattern="com.penzzly.engine.core.base.window.TransactionHandler.s(description)" />
        <added pattern="com.penzzly.engine.core.base.Scheduler.in(number)" />
        <added pattern="com.penzzly.engine.core.base.Scheduler.ConditionBuilder.forTheNext(number)" />
        <added pattern="java.lang.ProcessBuilder.ProcessBuilder(command)" />
        <added pattern="me.exerosis.taptweaker.Util.getID(command,errors)" />
        <added pattern="org.bukkit.command.CommandSender.sendMessage(s)" />
        <added pattern="com.penzzly.engine.core.utilites.LoadingBar.LoadingBar(length,loaded,unloaded)" />
        <added pattern="java.util.function.BiConsumer.accept(t,u)" />
        <added pattern="com.penzzly.engine.core.components.command.CommandGroup.onCommand(name,command)" />
        <added pattern="com.penzzly.engine.core.base.configuration.MapConfiguration.getOrSet(key,defaultValue)" />
        <added pattern="net.javelyn.BaseChannel.BaseChannel(initialCapacity,channel)" />
        <added pattern="dip(depth)" />
        <added pattern="java.lang.String.join(delimiter,elements)" />
        <added pattern="java.lang.System.getenv(name)" />
        <added pattern="API.newNavigate(path,params)" />
        <added pattern="org.openqa.selenium.WebElement.sendKeys(keysToSend)" />
        <added pattern="API.byTag(name)" />
        <added pattern="org.openqa.selenium.WebElement.getAttribute(name)" />
        <added pattern="java.lang.Thread.sleep(millis)" />
        <added pattern="org.bukkit.util.Vector.Vector(x,y,z)" />
        <added pattern="com.taptweaker.client.TapTweaker.breadcrumb(category,message)" />
        <added pattern="java.util.stream.Collectors.joining(delimiter)" />
        <added pattern="com.penzzly.engine.architecture.utilites.Swi.Ca.se(value,se)" />
        <added pattern="com.penzzly.engine.architecture.utilites.Swi.tch(input,closure)" />
        <added pattern="io.sentry.Sentry.init(dsn)" />
        <added pattern="com.taptweaker.client.Util.breadcrumb(category,message)" />
        <added pattern="com.fasterxml.jackson.core.JsonParser.getValueAsInt(def)" />
        <added pattern="com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(fieldName,value)" />
        <added pattern="com.fasterxml.jackson.core.JsonGenerator.writeNumberField(fieldName,value)" />
        <added pattern="com.fasterxml.jackson.core.JsonGenerator.writeStringField(fieldName,value)" />
        <added pattern="com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(def)" />
        <added pattern="com.comphenix.protocol.reflect.StructureModifier.read(fieldIndex)" />
        <added pattern="me.exerosis.chess.API.byClass(name)" />
        <added pattern="com.github.bhlangonijr.chesslib.Board.getFEN(includeCounters)" />
        <added pattern="org.openqa.selenium.interactions.Actions.moveToElement(target,xOffset,yOffset)" />
        <added pattern="org.openqa.selenium.interactions.Actions.moveByOffset(xOffset,yOffset)" />
        <added pattern="java.lang.String.replace(oldChar,newChar)" />
        <added pattern="java.text.MessageFormat.format(pattern,arguments)" />
      </blacklist>
      <blacklist language="Kotlin">
        <added pattern="kotlin.js.js(code)" />
        <added pattern="react.dom.p(classes,block)" />
        <added pattern="react.dom.div(classes,block)" />
      </blacklist>
    </blacklists>
    <option id="SHOW_LAMBDA_IMPLICIT_PARAMETER_RECEIVER" value="false" />
  </component>
</application>